//#One 1

//1
double R;
string? xy;
double x;
double y;
Random random = new Random();
R = random.Next(0,5);
Console.Write("Enter (x,y): ");
xy = Console.ReadLine();
string[] coord = xy.Split(',', ' ', '.');
x = double.Parse(coord[0].ToString());
y = double.Parse(coord[1].ToString());
bool IsNumberX = double.TryParse(x.ToString(), out x);
bool IsNumberY = double.TryParse(x.ToString(), out y);
if (IsNumberX && IsNumberY)
{
    if (R * R == (x * x) + (y * y))
    {
        Console.WriteLine("The coordinates in the circle");
    }
    else
    {
        Console.WriteLine("The coordinates not in the circle");
    }
}
else { Console.WriteLine("Wrong, try agin"); }

//2
//PrintMultiplicationTable();

//#Two 2

//1
//CalculateVAT();

//2
//ToOrdinlNumber();

//#Three 3

//1
//Paint();

//2
//PaintTriangle();

//#Four 4
//#Five 5
//#Six 6

//Penguin pingvin1 = new Penguin(2.4, "Yellow");

//#Seven 7
//#Eight 8
//#Nine 9
//#Ten 10

//1
int age;
Write("Enter your age:");
string input = ReadLine();
WriteLine("Before");
try
{
    age = int.Parse(input);
}
catch (FormatException)
{
    WriteLine("The age you entered is not");
}
catch (OverflowException)
{
    WriteLine("You cannot be so old.");
}
catch (Exception ex)
{
    WriteLine($"{ex.GetType()} says {ex.Message}");
}
WriteLine("After");

//2
try
{
    checked
    {
        int x = int.MaxValue - 1;
        WriteLine($"Initial value: {x}");
        x++;
        WriteLine($"After incrementing: {x}");
        x++;
        WriteLine($"Affter incrementing: {x}");
        x++;
        WriteLine($"Affter incrementing: {x}");
        x++;
    }
}
catch(OverflowException)
{
    WriteLine($"The code overflowed but I caught the exception");
}

//#Eleven 11
//#Twelve 12
//#Thirteenth 13
//#Fourteenth 14

//int i = 123;
//object o = i;
//try
//{
//    int j = (short)o;
//    Write("Unboxing OK.");
//}
//catch(InvalidCastException e)
//{
//    Write($"{e.Message} Error : Incorrect unboxing");
//}
/*int x1 = 3;
int y1 = x1;
//x1 = 5;
WriteLine($"x1 = {x1}");
WriteLine($"y1 = {y1}");
GCHandle gchX1 = GCHandle.Alloc(x1, GCHandleType.Pinned);
IntPtr pX1 = gchX1.AddrOfPinnedObject();
WriteLine($"Addres of x1:{pX1.ToString()}");

GCHandle gchY1 = GCHandle.Alloc(y1, GCHandleType.Pinned);
IntPtr pY1 = gchY1.AddrOfPinnedObject();
WriteLine($"Addres of y1:{pY1.ToString()}");

string x2 = "stringValue1";
string y2 = x2;
//x2 = "stringValue2";
WriteLine($"x2 = {x2}");
WriteLine($"y2 = {y2}");
GCHandle gchX2 = GCHandle.Alloc(x2, GCHandleType.Pinned);
IntPtr pX2 = gchX2.AddrOfPinnedObject();
WriteLine($"Addres of x2:{pX2.ToString()}");

GCHandle gchY2 = GCHandle.Alloc(y2, GCHandleType.Pinned);
IntPtr pY2 = gchY2.AddrOfPinnedObject();
WriteLine($"Addres of y2:{pY2.ToString()}");


P x3 = new P { a = "aravot", b = "ereko" };
P y3 = x3;
y3.a = "barev";
WriteLine($"x3 = {x3.a}");
WriteLine($"y3 = {y3.a}");
y3.b = "hajox";
WriteLine($"x3 = {x3.b}");
WriteLine($"y3 = {y3.b}");

GCHandle gchX3a = GCHandle.Alloc(x3.a, GCHandleType.Pinned);
IntPtr pX3a = gchX3a.AddrOfPinnedObject();
WriteLine($"Addres of x3a:{pX3a.ToString()}");
GCHandle gchX3b = GCHandle.Alloc(x3.b, GCHandleType.Pinned);
IntPtr pX3b = gchX3b.AddrOfPinnedObject();
WriteLine($"Addres of x3b:{pX3b.ToString()}");

GCHandle gchY3a = GCHandle.Alloc(y3.a, GCHandleType.Pinned);
IntPtr pY3a = gchY3a.AddrOfPinnedObject();
WriteLine($"Addres of y3a:{pY3a.ToString()}");
GCHandle gchY3b = GCHandle.Alloc(y3.b, GCHandleType.Pinned);
IntPtr pY3b = gchY3b.AddrOfPinnedObject();
WriteLine($"Addres of y3b:{pY3b.ToString()}");*/

//#Fifteenth 15

//1
Square object1 = new(24);
WriteLine($"Area of the square is {object1.GetArea()}");

//2
DerivedClass object2 = new DerivedClass();
object2.AbstractMethod();
WriteLine($"X = {object2.X} Y = {object2.Y}");

//3
ImplementationClass object3 = new ImplementationClass();
object3.SampleMethod();
ISampleInterface object4 = new ImplementationClass();
object4.SampleMethod();
ImplementationClassA objectA = new ImplementationClassA();
ImplementationClassB objectB = new ImplementationClassB();
ISampleInterface iOb = objectA;
iOb.SampleMethod();
iOb = objectB;
iOb.SampleMethod();
if (iOb is ISampleInterface)
{
    WriteLine("DoneA");
    WriteLine("DoneB");
}
else
{
    WriteLine("Class a and b do not implement any interface");
}

//Sixteenth 16

//1
WriteLine("****How the animals sounds****");
//Tiger tiger = new Tiger();
//tiger.Sound();
//Dog dog = new Dog();
//dog.Sound();
//Monkey monkey = new Monkey();
//monkey.Sound();

//2
//ISound animal = new Tiger();
//animal.Sound();
//animal = new Dog();
//animal.Sound();
//animal = new Monkey();
//animal.Sound();

//3
//List<ISound> animls =
//[
//    new Dog(),
//    new Monkey(),
//    new Tiger(),
//];
//foreach (ISound animal in animls)
//{
//    animal.Sound();
//}

//4
ISound animal = GetAnimal();
//animal.Sound();
//animal = GetAnimal();
//animal.Sound();
//animal = GetAnimal();
//animal.Sound();
//animal = GetAnimal();

//5
MakeSound(animal);
animal = GetAnimal();
MakeSound(animal);
animal = GetAnimal();
MakeSound(animal);

//6
static ISound GetAnimal()
{
    ISound animal;
    Random random = new();
    int temp = random.Next(0, 3);
    return temp switch
    {
        0 => animal = new Tiger(),
        1 => animal = new Dog(),
        2 => animal = new Monkey(),
        _ => throw new Exception("No animal"),
    };
}
static void MakeSound(ISound animal)
{
    animal.Sound();
}

//#Sixteenth 16
//#Seventeenth 17
//#Eighteenth 18

//1
Car car = new();
string color = car.CarColor();
WriteLine(color);
WriteLine(car.CarColor());

//2
string ch = "aabdbaa";
WriteLine(ch.IsPaliandrom());

//3
int sn = 0;
while (true)
{
    WriteLine($"{sn} = {sn.IsPrime()} ");
    sn++;
    if (sn == 1000) break;
}
//#Nineteenth 19
//#Twentieth 20

//1
Garage carLot = new();
foreach (Car c in carLot)
{
    WriteLine($"Car {c.Name} is going {c.Speed} ");
}

//2
Spectrum colors = new Spectrum();
foreach (var c in colors)
{

    WriteLine($"Color is {c}");
}

//#Twenty-First 21

//1
Contact sarah = new()
{
    FirstName = "Sarah",
    AgeInYears = 42
};
var sarahWriter = new ContactConsoleWriter(sarah);
sarahWriter.Write();

//#Twenty-Second 22

//1
Contact sarah = new()
{
    FirstName = "Sarah",
    AgeInYears = 42
};
var sarahWriter = new ContactConsoleWriter(sarah);
sarahWriter.Write();

//#Twenty-Third 23

/pipeline/delegate/to trriger/eventargas/sender/

//#Twenty-Fourth 24

//1
WorkPerformedHandler del1 = new(WorkPerformed1);
WorkPerformedHandler del2 = new(WorkPerformed2);
WorkPerformedHandler del3 = new(WorkPerformed3);
//del1(4, WorkType.Meeting);
//del2(11, WorkType.Research);
//DoWork(del2);
//del1 += del2;
//del1 += del3;
del1 += del2 + del3;
//del1(24, WorkType.Reports);
int finalhours = del1(23,WorkType.Reports);
WriteLine(finalhours);
static int WorkPerformed1(int hours, WorkType workType)
{
    WriteLine("WorkPerformed1 called " + hours.ToString());
    return hours + 1;
}

static int WorkPerformed2(int hours, WorkType workType)
{
    WriteLine("WorkPerformed2 called " + hours.ToString());
    return hours + 1;
}
static int WorkPerformed3(int hours, WorkType workType)
{
    WriteLine("WorkPerformed3 called " + hours.ToString());
    return hours + 1;
}
//static void DoWork(WorkPerformedHandler del)
//{
//    del(6, WorkType.Meeting);
//}

//#Twenty-fifth 25

//1
var worker = new Worker();
worker.WorkPerformed += new EventHandler<WorkPerformedEventArgs>(worker_WorkPerformed);
worker.WorkCompleted += new EventHandler(Worker_WorkCompleted);
worker.DoWork(23, WorkType.Reports);
//worker.WorkPerformed += delegate (object sender, WorkPerformedEventArgs e);
void worker_WorkPerformed(object sender, WorkPerformedEventArgs e)
{
    WriteLine($"Hours worked: {e.Hours.ToString()} {e.WorkType}");
}

//2
string path = @"C:\Users\Administrator\Pictures\Screenshots";
ShowlargrFileWithoutLinq(path);
static void ShowlargrFileWithoutLinq(string path)
{
    DirectoryInfo directory = new DirectoryInfo(path);
    FileInfo[] files = directory.GetFiles();
    foreach (FileInfo item in files)
    {
        WriteLine($"{item.Name} : {item.Length}");
    }
}

//#Twenty-Sixth 26

//1
string path = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + @"\Pictures\Screenshots";
ShowlargrFileWithoutLinq(path);
WriteLine("\n");
ShowlargeFileWithLinq(path);
static void ShowlargrFileWithoutLinq(string path)
{
    DirectoryInfo directory = new DirectoryInfo(path);
    FileInfo[] files = directory.GetFiles();
    Array.Sort(files, new FileInfoComparer());
    for (int i = 0; i < 5; i++)
    {
        WriteLine($"{files[i].Name,-50} : {files[i].Length,10:N0}");
    }
}
static void ShowlargeFileWithLinq(string path)
{
    //var query = from file in new DirectoryInfo(path).GetFiles() orderby file.Length descending select file;
    var query = new DirectoryInfo(path).GetFiles().OrderByDescending(f => f.Length).Take(5);
    foreach (var file in query)
    {
        WriteLine($"{file.Name,-50} : {file.Length,10:N0}");
    }
}

//2
Student[] students =
[
    new() {StID = 1, LastName = "Carson"},
     new() {StID = 2, LastName = "Klassen"},
      new()  {StID = 3, LastName = "Fleming"}
];
CourseStudent[] studentInCourse =
[
    new() {CourseName = "Art",StID = 1},
    new() {CourseName = "Art",StID = 2},
    new() {CourseName = "History",StID = 1},
    new() {CourseName = "History",StID = 3},
    new() {CourseName = "Physics",StID = 3},
];
var query = from s in students join c in studentInCourse on s.StID equals c.StID where c.CourseName == "History" select s.LastName;
foreach(var q in query)
{
    Console.WriteLine($"Student taking History: {q}");
}

//#Twenty-Seventh 27

//1
WriteLine("Dude");
Foo foo = new Foo();
//foo.SuspendEvents();
//try
//{
//    WriteLine("Main1");
//}
//finally
//{
//    foo.ResumeEvents();
//}
using (foo.SuspendEvents())
{
    Console.WriteLine("Main Version 2");
}

//#Twenty-Eighth 28

//1
Process process = Process.GetCurrentProcess();
string processName = Process.GetCurrentProcess().ProcessName;
long ram = process.WorkingSet64;
WriteLine($"Process Name: {processName}\nRam: {ram / 1024 / 1024}MB");

//2
Thread myThread = new(new ThreadStart(WorkingWithThreads.MyThreadMethod));
myThread.IsBackground = false;
myThread.Start();
//myThread.Join();
Console.WriteLine("Hello from main thread");

//#Twenty-Ninth 29
//p =np movie
//turring movie

//#Thirtieth 30