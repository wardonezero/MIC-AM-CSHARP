//One
/*//1
//double R;
//string? xy;
//double x;
//double y;
//Random random = new Random();
//R = random.Next(0,5);
//Console.Write("Enter (x,y): ");
//xy = Console.ReadLine();
//string[] coord = xy.Split(',', ' ', '.');
//x = double.Parse(coord[0].ToString());
//y = double.Parse(coord[1].ToString());
//bool IsNumberX = double.TryParse(x.ToString(), out x);
//bool IsNumberY = double.TryParse(x.ToString(), out y);
//if (IsNumberX && IsNumberY)
//{
//    if (R * R == (x * x) + (y * y))
//    {
//        Console.WriteLine("The coordinates in the circle");
//    }
//    else
//    {
//        Console.WriteLine("The coordinates not in the circle");
//    }
//}
//else { Console.WriteLine("Wrong, try agin"); }*/
//2
//PrintMultiplicationTable();
//Two
//1
//CalculateVAT();
//2
//ToOrdinlNumber();
//Three
//1
//Paint();
//2
//PaintTriangle();
//Four
//Five
//Six
//Penguin pingvin1 = new Penguin(2.4, "Yellow");
//Seven
//Eight
//Nine
//Ten
//1
/*int age;
Write("Enter your age:");
string input = ReadLine();
WriteLine("Before");
try
{
    age = int.Parse(input);
}
catch (FormatException)
{
    WriteLine("The age you entered is not");
}
catch (OverflowException)
{
    WriteLine("You cannot be so old.");
}
catch (Exception ex)
{
    WriteLine($"{ex.GetType()} says {ex.Message}");
}
WriteLine("After");*/
//2
try
{
    checked
    {
        int x = int.MaxValue - 1;
        WriteLine($"Initial value: {x}");
        x++;
        WriteLine($"After incrementing: {x}");
        x++;
        WriteLine($"Affter incrementing: {x}");
        x++;
        WriteLine($"Affter incrementing: {x}");
        x++;
    }
}
catch(OverflowException)
{
    WriteLine($"The code overflowed but I caught the exception");
}
//Eleven
//Twelve
//Thirteenth
//Fourteenth
//int i = 123;
//object o = i;
//try
//{
//    int j = (short)o;
//    Write("Unboxing OK.");
//}
//catch(InvalidCastException e)
//{
//    Write($"{e.Message} Error : Incorrect unboxing");
//}
/*int x1 = 3;
int y1 = x1;
//x1 = 5;
WriteLine($"x1 = {x1}");
WriteLine($"y1 = {y1}");
GCHandle gchX1 = GCHandle.Alloc(x1, GCHandleType.Pinned);
IntPtr pX1 = gchX1.AddrOfPinnedObject();
WriteLine($"Addres of x1:{pX1.ToString()}");

GCHandle gchY1 = GCHandle.Alloc(y1, GCHandleType.Pinned);
IntPtr pY1 = gchY1.AddrOfPinnedObject();
WriteLine($"Addres of y1:{pY1.ToString()}");

string x2 = "stringValue1";
string y2 = x2;
//x2 = "stringValue2";
WriteLine($"x2 = {x2}");
WriteLine($"y2 = {y2}");
GCHandle gchX2 = GCHandle.Alloc(x2, GCHandleType.Pinned);
IntPtr pX2 = gchX2.AddrOfPinnedObject();
WriteLine($"Addres of x2:{pX2.ToString()}");

GCHandle gchY2 = GCHandle.Alloc(y2, GCHandleType.Pinned);
IntPtr pY2 = gchY2.AddrOfPinnedObject();
WriteLine($"Addres of y2:{pY2.ToString()}");


P x3 = new P { a = "aravot", b = "ereko" };
P y3 = x3;
y3.a = "barev";
WriteLine($"x3 = {x3.a}");
WriteLine($"y3 = {y3.a}");
y3.b = "hajox";
WriteLine($"x3 = {x3.b}");
WriteLine($"y3 = {y3.b}");

GCHandle gchX3a = GCHandle.Alloc(x3.a, GCHandleType.Pinned);
IntPtr pX3a = gchX3a.AddrOfPinnedObject();
WriteLine($"Addres of x3a:{pX3a.ToString()}");
GCHandle gchX3b = GCHandle.Alloc(x3.b, GCHandleType.Pinned);
IntPtr pX3b = gchX3b.AddrOfPinnedObject();
WriteLine($"Addres of x3b:{pX3b.ToString()}");

GCHandle gchY3a = GCHandle.Alloc(y3.a, GCHandleType.Pinned);
IntPtr pY3a = gchY3a.AddrOfPinnedObject();
WriteLine($"Addres of y3a:{pY3a.ToString()}");
GCHandle gchY3b = GCHandle.Alloc(y3.b, GCHandleType.Pinned);
IntPtr pY3b = gchY3b.AddrOfPinnedObject();
WriteLine($"Addres of y3b:{pY3b.ToString()}");*/
//Fifteenth
//1
Square object1 = new(24);
WriteLine($"Area of the square is {object1.GetArea()}");
//2
DerivedClass object2 = new DerivedClass();
object2.AbstractMethod();
WriteLine($"X = {object2.X} Y = {object2.Y}");
//3
ImplementationClass object3 = new ImplementationClass();
object3.SampleMethod();
ISampleInterface object4 = new ImplementationClass();
object4.SampleMethod();
ImplementationClassA objectA = new ImplementationClassA();
ImplementationClassB objectB = new ImplementationClassB();
ISampleInterface iOb = objectA;
iOb.SampleMethod();
iOb = objectB;
iOb.SampleMethod();
if (iOb is ISampleInterface)
{
    WriteLine("DoneA");
    WriteLine("DoneB");
}
else
{
    WriteLine("Class a and b do not implement any interface");
}
//Sixteenth
//1
WriteLine("****How the animals sounds****");
//Tiger tiger = new Tiger();
//tiger.Sound();
//Dog dog = new Dog();
//dog.Sound();
//Monkey monkey = new Monkey();
//monkey.Sound();
//2
//ISound animal = new Tiger();
//animal.Sound();
//animal = new Dog();
//animal.Sound();
//animal = new Monkey();
//animal.Sound();
//3
//List<ISound> animls =
//[
//    new Dog(),
//    new Monkey(),
//    new Tiger(),
//];
//foreach (ISound animal in animls)
//{
//    animal.Sound();
//}
//4
ISound animal = GetAnimal();
//animal.Sound();
//animal = GetAnimal();
//animal.Sound();
//animal = GetAnimal();
//animal.Sound();
//animal = GetAnimal();
//5
MakeSound(animal);
animal = GetAnimal();
MakeSound(animal);
animal = GetAnimal();
MakeSound(animal);
//6
static ISound GetAnimal()
{
    ISound animal;
    Random random = new();
    int temp = random.Next(0, 3);
    return temp switch
    {
        0 => animal = new Tiger(),
        1 => animal = new Dog(),
        2 => animal = new Monkey(),
        _ => throw new Exception("No animal"),
    };
}
static void MakeSound(ISound animal)
{
    animal.Sound();
}
//Seventeenth
//Eighteenth
//1
//Car car = new();
//string color = car.CarColor();
//WriteLine(color);
//WriteLine(car.CarColor());
////2
//string ch = "aabdbaa";
//WriteLine(ch.IsPaliandrom());
//3
int sn = 0;
while (true)
{
    WriteLine($"{sn} = {sn.IsPrime()} ");
    sn++;
    if (sn == 1000) break;
}
//Nineteenth
//Twentieth
